// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "sqlite"
  url          = "file:\\db\\shine-desktop.db"
  relationMode = "foreignKeys"
}

model Product {
  id            Int         @id @default(autoincrement())
  name          String      @unique
  internal_code Int         @unique
  barcode       Barcode[]
  price         Price[]
  order_item    OrderItem[]
  is_active     Boolean     @default(true)
}

model Barcode {
  id         Int     @id @default(autoincrement())
  code       String  @unique
  product    Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_id Int

  @@unique([product_id, code])
}

model Price {
  id                       Int     @id @default(autoincrement())
  product                  Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_id               Int
  inventory                Int
  base_price               Int
  base_discount_percentage Int?    @default(0)

  @@unique([product_id, base_price])
}

model Order {
  id           Int         @id @default(autoincrement())
  created_date DateTime    @default(now())
  status       String      @default("temp")
  order_items  OrderItem[]
  user_phone   String?
  is_refunded  Boolean     @default(false)
  refund       Refund?
  payment      Payment?
}

model OrderItem {
  id             Int         @id @default(autoincrement())
  order          Order       @relation(fields: [order_id], references: [id], onDelete: Cascade)
  order_id       Int
  product        Product     @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_id     Int
  quantity       Int
  label_price    Int
  discount_price Int
  sell_price     Int
  refund_item    RefundItem?

  @@unique([id, order_id])
}

model Refund {
  id            Int          @id @default(autoincrement())
  order         Order        @relation(fields: [order_id], references: [id], onDelete: Cascade)
  order_id      Int          @unique
  created_date  DateTime     @default(now())
  modified_date DateTime     @updatedAt
  description   String       @default("")
  status        String       @default("from")
  refund_item   RefundItem[]
}

model RefundItem {
  id                  Int       @id @default(autoincrement())
  refund              Refund    @relation(fields: [refund_id], references: [id], onDelete: Cascade)
  refund_id           Int
  order_item          OrderItem @relation(fields: [order_item_id], references: [id], onDelete: Cascade)
  order_item_id       Int       @unique
  order_item_quantity Int
}

model Pos {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  ip              String           @unique
  port            String
  psp             String           @default("BPM")
  pos_transaction PosTransaction[]
}

model PosTransaction {
  id              Int      @id @default(autoincrement())
  pos             Pos?     @relation(fields: [pos_id], references: [id], onDelete: SetNull)
  pos_id          Int?
  amount          Int
  ref_id          String?
  pan             String?
  terminal_number String?
  created_date    DateTime @default(now())
  updated_date    DateTime @updatedAt
  status          Boolean  @default(false)
  status_code     Int      @default(0)
  payment         Payment?
}

model Payment {
  id                 Int             @id @default(autoincrement())
  amount             Int
  wallet_transaction Int             @default(0)
  pos_transaction    PosTransaction? @relation(fields: [pos_transaction_id], references: [id], onDelete: SetNull)
  pos_transaction_id Int?            @unique
  order              Order?          @relation(fields: [order_id], references: [id], onDelete: SetNull)
  order_id           Int?            @unique
  created_date       DateTime        @default(now())
  updated_date       DateTime        @updatedAt
  is_resolved        Boolean         @default(false)
}

model Settings {
  id    Int    @id @default(autoincrement())
  key   String @unique
  value String

  @@unique([key, value])
}
